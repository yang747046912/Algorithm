#include "BRtreeHelper.h"void createBRTree(BRtree & root, int * array, int n){	for (int i = 0; i < n; i++)	{		insertBRTree(root, *(array + i));	}}void insertBRTree(BRtree & root, int value){	stack<BRtree> nodes;	BRtree tmp = root;	while (tmp != NULL&&tmp->value != value)	{		nodes.push(tmp);		if (tmp->value > value)		{			tmp = tmp->leftNode;		}		else		{			tmp = tmp->rigthNode;		}	}	if (tmp != NULL)	{		cout << value << "已经存在，无法插入" << endl;		return;	}	tmp = new BRtreeNode;	tmp->value = value;	tmp->leftNode = NULL;	tmp->rigthNode = NULL;	if (nodes.empty())	{		root = tmp;		root->color = BLACK;		return;	}	BRtree tmpParent=NULL;	tmpParent = nodes.top();	if (tmp ->value > tmpParent->value)	{		tmpParent->rigthNode = tmp; 	}	else	{		tmpParent->leftNode = tmp;	}	while (!nodes.empty())	{		tmpParent = nodes.top();		if (tmpParent->color == BLACK)		{			return;		}		nodes.pop();		if (nodes.empty()) {			if (tmpParent->color == RED)			{				tmpParent->color = BLACK;			}			return;		}		BRtree tmpGrand =nodes.top() ;		BRtree tmpUncle=NULL;		if (tmpParent->value > tmpGrand->value)		{			tmpUncle = tmpGrand->leftNode;		}		else		{			tmpUncle = tmpGrand->rigthNode;		}		if (tmpUncle != NULL&&tmpUncle->color == RED)		{			tmpParent->color = BLACK;			tmpUncle->color = BLACK;			tmpGrand->color = RED;			tmp = tmpGrand;			nodes.pop();		}		else		{			if (tmpGrand ->leftNode == tmpParent) {				if (tmpParent ->leftNode ==tmp)				{					roateLL(tmpGrand);				}				else				{					roateLR(tmpGrand);				}			}			else			{				if (tmpParent->rigthNode == tmp)				{					roateRR(tmpGrand);				}				else				{					roateRL(tmpGrand);				}			}			tmpGrand->color = BLACK;			tmpGrand->leftNode->color = RED;			tmpGrand->rigthNode->color = RED;			nodes.pop();			if (nodes.empty()) {				root = tmpGrand;			}			else			{				if (nodes.top()->value > tmpGrand ->value)				{					nodes.top()->leftNode = tmpGrand;				}				else				{					nodes.top()->rigthNode = tmpGrand;				}			}			return;		}	}}void roateLL(BRtree & root){	BRtree left = root->leftNode;	root->leftNode = root->rigthNode;	left->rigthNode = root;	root = left; }void roateLR(BRtree & root){	BRtree left = root->leftNode;	BRtree right = left->rigthNode;	root->leftNode = right->rigthNode;	left->rigthNode = right->leftNode; 	right->leftNode  = left;	right->rigthNode = root;	root = right;}void roateRR(BRtree & root){	BRtree right = root->rigthNode;	root->rigthNode = right->leftNode;	right->leftNode = root;	root = right;}void roateRL(BRtree & root){	BRtree right = root->rigthNode;	BRtree left = right->leftNode;	root->rigthNode = left->leftNode;	right->leftNode = left->rigthNode;	left->leftNode = root;	left->rigthNode = right; 	root = left;}